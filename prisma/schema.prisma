// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Expert {
  id     String  @id @default(uuid())
  name   String
  email  String  @unique
  phone  String?
  queues Queue[]

  @@map("experts")
}

model Queue {
  id            String          @id @default(uuid())
  createdAt     DateTime        @default(now()) @db.Date()
  expert        Expert          @relation(fields: [expertId], references: [id])
  expertId      String
  queuecustomer QueueCustomer[]

  @@map("queues")
}

model QueueCustomer {
  id         Int     @id @default(autoincrement())
  queue      Queue   @relation(fields: [queueId], references: [id])
  queueId    String
  name       String
  service    String
  isAwaiting Boolean @default(true)

  @@map("queuecustomers")
}

// Exemplos de relacioamento de tabelas 1:1 

// model User {
//   id      String   @id @default(uuid())
//   name    String
//   profile Profile?
// }

// model Profile {
//   id     String @id @default(uuid())
//   type   String
//   user   User   @relation(fields: [userId], references: [id])
//   userId String @unique
// }

// Exemplos de relacioamento de tabelas  Muitos para Muitos (Many to Many)

// model Product {
//   id              String            @id @default(uuid())
//   name            String
//   ProductCategory ProductCategory[]
// }

// model Category {
//   id       String            @id @default(uuid())
//   name     String
//   products ProductCategory[]
// }

// model ProductCategory {
//   product    Product  @relation(fields: [postId], references: [id])
//   postId     String
//   Category   Category @relation(fields: [categoryId], references: [id])
//   categoryId String

//   @@id([postId, categoryId])
// }
